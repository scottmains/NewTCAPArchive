@using Microsoft.AspNetCore.Components.Authorization;
@using Radzen.Blazor
@using TCAPArchive.App.Services;
@inherits LayoutComponentBase
<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation



<RadzenLayout class="rz-shadow-3" >
    <RadzenHeader>
        <div class="d-flex align-items-center">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
          
        </div>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Path="/predators" Text="Predators" Icon="home" />
            <RadzenPanelMenuItem Path="/decoys" Text="Decoys" Icon="account_box" />
            <RadzenPanelMenuItem Path="/chatsessions" Text="Chat Sessions" Icon="account_box" />
                <button class="btn btn-primary" @onclick="HandleLogoutUser"> Logout</button>
        </RadzenPanelMenu>
        <div class="p-2">
          
        </div>
    </RadzenSidebar>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;

    [Inject]
    IUserDataService userDataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }

    protected async Task HandleLogoutUser()
    {
        if (await userDataService.LogoutUserAsync())
        {
            Navigation.NavigateTo("/");
        }
    }
}
